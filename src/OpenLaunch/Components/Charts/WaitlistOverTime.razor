@using OpenLaunch.Data
@using OpenLaunch.Models
@using Microsoft.EntityFrameworkCore
@using OpenLaunch.Services
@using Theme = ApexCharts.Theme

@inject AppDbContext _context
@inject IServiceProvider ServiceProvider
@inject DarkModeService DarkModeService

@implements IDisposable

<div class="apex-chart-container @(DarkModeService.IsDarkMode ? "dark-mode" : "light-mode")">
    <ApexChart TItem="SignupData"
               @ref=chart
               Title="Waitlist Signups"
               Height="300"
               Options="@options">

        <ApexPointSeries TItem="SignupData"
                         Items="SignupStats"
                         Name="Total Users"
                         SeriesType="SeriesType.Line"
                         XValue="@(e => e.Date.ToString("MMM dd"))"
                         YValue="@(e => e.Count)"
        />
    </ApexChart>
</div>

<style>
    .apexcharts-canvas > svg {
        background-color: inherit !important;
    }
</style>

@code {
private List<SignupData> SignupStats = new();
private ApexChartOptions<SignupData> options;
private ApexChart<SignupData> chart;

[Parameter]
public DateTime StartDate { get; set; }

[Parameter]
public DateTime EndDate { get; set; }

protected override async Task OnInitializedAsync()
{
    options = new ApexChartOptions<SignupData>
    {
        Theme = new Theme
        {
            Mode = DarkModeService.IsDarkMode ? Mode.Dark : Mode.Light
        }
    };

    DarkModeService.OnChange += UpdateChartTheme;
    await LoadWaitlistStatsAsync();
}

private async Task UpdateChartTheme()
{
    options.Theme.Mode = DarkModeService.IsDarkMode ? Mode.Dark : Mode.Light;
    await chart.RenderAsync();
}

private async Task LoadWaitlistStatsAsync()
{
    using var scope = ServiceProvider.CreateScope();
    var scopedContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    
    int baselineTotal = await scopedContext.WaitlistSignups
        .Where(u => u.CreatedAt.Date < StartDate)
        .CountAsync();
    
    // Get all users grouped by date
    var userSignups = await scopedContext.WaitlistSignups
        .Where(u => u.CreatedAt.Date >= StartDate && u.CreatedAt.Date <= EndDate)
        .GroupBy(u => u.CreatedAt.Date)
        .Select(g => new
        {
            Date = g.Key,
            Count = g.Count()
        })
        .OrderBy(x => x.Date)
        .ToListAsync();
    
    var dateRange = Enumerable.Range(0, (EndDate - StartDate).Days + 1)
        .Select(offset => StartDate.AddDays(offset))
        .ToList();

    int runningTotal = baselineTotal;

    SignupStats = dateRange.Select(date =>
    {
        var signup = userSignups.FirstOrDefault(x => x.Date == date);
        runningTotal += signup?.Count ?? 0;

        return new SignupData
        {
            Date = date,
            Count = runningTotal
        };
    }).ToList();
}

public void Dispose()
{
    DarkModeService.OnChange -= UpdateChartTheme;
}

public class SignupData
{
    public DateTime Date { get; set; }
    public int Count { get; set; }
}
}