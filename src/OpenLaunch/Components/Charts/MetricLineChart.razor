@using ApexCharts
@using OpenLaunch.Services
@using Theme = ApexCharts.Theme

@rendermode InteractiveServer

@inject DarkModeService DarkModeService

@implements IDisposable

<ApexChart TItem="MetricResult" Title="@Title" Height="300" Options="@options" @ref=chart>
    @if (SeriesData != null)
    {
        @foreach (var series in SeriesData)
        {
            <ApexPointSeries TItem="MetricResult"
                             Items="series.Value"
                             Name="@FriendlyNames[series.Key]"
                             SeriesType="SeriesType.Line"
                             XValue="@(e => e.Timestamp.ToString("MMM dd"))"
                             YValue="@(e => e.Value)" />
        }
    }
    else
    {
        <text>Loading data...</text>
    }
</ApexChart>

<style>
    .apexcharts-canvas > svg {
        background-color: inherit !important;
    }

    .apexcharts-canvas > svg {
        background-color: inherit !important;
    }
</style>

@code {
    [Parameter]
    public string Title { get; set; }
    private ApexChartOptions<MetricResult> options;
    private ApexChart<MetricResult> chart;

    [Parameter]
    public Dictionary<string, List<MetricResult>> SeriesData { get; set; }

    private string serviceType = Environment.GetEnvironmentVariable("USE_SERVICE");

    public Dictionary<string, string> FriendlyNames =>
        serviceType switch
        {
            "AWS" => new Dictionary<string, string>
            {
                { "send_1", "Sent" },
                { "opens_3", "Opened" },
                { "delivery_2", "Delivered" },
                { "clicks_4", "Clicked" },
                { "transientBounce_5", "Transient Bounce" },
                { "permanentBounce_6", "Permanent Bounce" },
                { "complaints_7", "Complaints" }
            },
            "MOCK" => new Dictionary<string, string>
            {
                { "send_1", "Sent" },
                { "delivery_2", "Delivered" },
                { "opens_3", "Opened" },
                { "bounce_4", "Bounce" },
                { "block_5", "Blocked" },
                { "spam_complaint_6", "Spam Complaints" }
            },
            _ => new Dictionary<string, string>()
        };
    
    // public Dictionary<string, string> FriendlyNames { get; set; } = new()
    // {
    //     { "send_1", "Sent" },
    //     { "opens_3", "Opened" },
    //     { "delivery_2", "Delivered" },
    //     { "clicks_4", "Clicked" },
    //     { "transientBounce_5", "Transient Bounce" },
    //     { "permanentBounce_6", "Permanent Bounce" },
    //     { "complaints_7", "Complaints" }
    // };
    
    protected override void OnInitialized()
    {
        options = new ApexChartOptions<MetricResult>
        {
            Theme = new Theme
            {
                Mode = DarkModeService.IsDarkMode ? Mode.Dark : Mode.Light
            }
        };
        
        DarkModeService.OnChange += UpdateChartTheme;
    }
    
    private async Task UpdateChartTheme()
    {
        options.Theme.Mode = DarkModeService.IsDarkMode ? Mode.Dark : Mode.Light;
        await chart.RenderAsync();
    }
    
    public void Dispose()
    {
        DarkModeService.OnChange -= UpdateChartTheme;
    }

    public class MetricResult
    {
        public DateTime Timestamp { get; set; }
        public long Value { get; set; }
    }
}