@using Microsoft.AspNetCore.Authorization
@using Mono.TextTemplating
@using OpenLaunch.Services
@using Color = MudBlazor.Color
@inherits LayoutComponentBase
@attribute [Authorize]
@inject DarkModeService DarkModeService
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime

    @* Required *@
    <MudThemeProvider Theme="@_theme" IsDarkMode="@DarkModeService.IsDarkMode" @rendermode="InteractiveServer" />
    <MudPopoverProvider @rendermode="InteractiveServer" />
    @* Needed for dialogs *@
    <RadzenDialog></RadzenDialog>
    <MudDialogProvider @rendermode="InteractiveServer"
                       FullWidth="true"
                       />
    @* Needed for snackbars *@
    <MudSnackbarProvider @rendermode="InteractiveServer" />
    <RadzenNotification></RadzenNotification>
    
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5">OpenLaunch</MudText>
            <MudSpacer></MudSpacer>
            <MudIconButton Icon="@(DarkModeService.IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" Color="Color.Inherit" OnClick="ToggleDarkMode" />
        </MudAppBar>
        <MudDrawer Color="@(DarkModeService.IsDarkMode ? Color.Dark : Color.Primary)" @bind-Open="@_drawerOpen" Breakpoint="Breakpoint.Xl" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Responsive" Elevation="2">
            <MudDrawerHeader>
                <MudText Typo="Typo.h5" class="mt-1">
                    Menu
                </MudText>
            </MudDrawerHeader>
            <NavMenu></NavMenu>
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
    
    @code {
        private bool IsInitialized;
        private bool _drawerOpen = true;
        private MudTheme _theme = new MudTheme();
        
        protected override void OnInitialized()
        {
            base.OnInitialized();
            ThemeService.ThemeChanged += OnThemeChanged;
        }

        // CURRENTLY BROKEN
        private void OnThemeChanged()
        {
            InvokeAsync(StateHasChanged);
        }
        
        void DrawerToggle() => _drawerOpen = !_drawerOpen;

        async Task ToggleDarkMode() => await DarkModeService.Toggle();

    }