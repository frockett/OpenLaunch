@page "/Account/Login"
@attribute [AllowAnonymous]
@namespace AdminDashboard.Components.Account

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using OpenLaunch.Models
@using Microsoft.AspNetCore.Authorization
@using OpenLaunch.Components.Layout
@using MudBlazor.StaticInput
@using OpenLaunch.Components.Account

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@layout EmptyLayout

<PageTitle>Log in</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column gap-5 justify-center align-center" Style="min-height: 90vh;">
    <StatusMessage Message="@errorMessage"/>
    <MudGrid Justify="Justify.Center">
        <MudItem md="8">
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <MudGrid Justify="Justify.Center" Spacing="2">
                    <MudPaper Class="pa-18" Style="width: 100%;">
                    <MudItem md="12" Class="mb-2">
                        <MudStaticTextField For="@(() => Input.UserName)" @bind-Value="Input.UserName"
                                            Label="Username" Placeholder="username"
                                            UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } })"/>
                    </MudItem>
                    <MudItem md="12" Class="mb-2">
                        <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                            Label="Password" InputType="InputType.Password" Placeholder="password"
                                            UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })"/>
                    </MudItem>
                    <MudItem md="12" Class="mb-2">
                        <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                    </MudItem>
                    <MudItem md="12" Class="mb-2">
                        <MudStaticButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                    </MudItem>
                    </MudPaper>
                </MudGrid>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var user = await UserManager.FindByNameAsync(Input.UserName);
        if (user == null || !await UserManager.IsInRoleAsync(user, "Admin"))
        {
            errorMessage = "Naughty naughty";
            return;
        } 

        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}