@page "/Keys"
@using OpenLaunch.Models
@using OpenLaunch.Services

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-16 ma-2">
                <MudGrid Spacing="3">
                    <MudItem xs="12" md="4" Style="padding: 1rem;">
                        <h3>Create your API keys</h3>
                        <div style="margin-top: 1rem;">Create your API key before start sending requests to the /api/subscribe endpoint.</div>
                    </MudItem>
                    <MudItem xs="12" md="4" Style="padding: 1rem;">
                        <h3>Use in subscribe request headers</h3>
                        <div style="margin-top: 1rem;">The subscribe endpoint expects a key in the <em>x-api-key</em> header.</div>
                    </MudItem>
                    <MudItem xs="12" md="4" Style="padding: 1rem;">
                        <h3>Rotate your keys regularly</h3>
                        <div style="margin-top: 1rem;">Don't forget to regularly rotate your API keys for security.</div>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="3">
        <MudItem xs="12" lg="4">
            <CreateApiKeyForm OnApiKeyCreated="RefreshKeys"/>
        </MudItem>
        <MudItem xs="12" lg="8">
            <ApiKeysTable ApiKeys="apiKeys" OnDelete="RemoveKeyAsync"></ApiKeysTable>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    [Inject] ApiKeyService ApiKeyService { get; set; }
    private List<ApiKey> apiKeys = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshKeys(null);
    }

    private async Task RefreshKeys(ApiKey _)
    {
        apiKeys = await ApiKeyService.GetAllKeysAsync();
    }

    private async Task RemoveKeyAsync(ApiKey key)
    {
        await ApiKeyService.DeleteApiKeyAsync(key);
        await RefreshKeys(null);
    }
}